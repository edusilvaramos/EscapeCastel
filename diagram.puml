@startuml
skinparam classAttributeIconSize 0
skinparam classFontStyle bold

package rpgEscapeCastel {
    class App {
        + main(args: String[]): void
    }

    package gameMap {}

    package weapon {
        abstract class Weapon {
            - id: int
            - name: String
            - damage: int
            - price: int
            - resourcePath: String
            + Weapon(id: int, name: String, damage: int, price: int, resourcePath: String)
            {abstract} + asciiArt(): String

            ' OVERLOADING (PFF 3)'
            + attack(target: Destructible): void
            + attack(target: Monster): void
            + attack(target: Obstacle): void
        }

        class Axe extends Weapon
        class Bow extends Weapon
        class Explosive extends Weapon
        class Gun extends Weapon
        class Knife extends Weapon
        class Mace extends Weapon
        class Shield extends Weapon
        class Sword extends Weapon

        Weapon ..> Destructible : attack(...)

        class WeaponStore {
            - catalog: List<Weapon>
            + register(weapon: Weapon): void
            + list(): List<Weapon>
            + getById(id: int): Weapon
            + getByName(name: String): Weapon
            + createByName(name: String): Weapon
        }

        WeaponStore o--> "0..*" Weapon : catalog/factory

    }
    package player {

        enum Team {
            CENTAUR
            DEVIL
            DRAGON
            FAIRY
            GHOST
            GRIM_REAPER
            GRYPHON
            MERMAID
            MONSTER
            SKELETON
            UNICORN
        }
        class Inventory <<final>> {
            - capacity: int = 2
            - weapons: List<Weapon>
            + addWeapon(weapon: Weapon): boolean
            + removeWeapon(weapon: Weapon): boolean
            + viewWeapons(): List<Weapon>
            + size(): int
            + isFull(): boolean
            + getCapacity(): int
        }

        class Player {
            - name: String
            - team: Team
            - inventory: Inventory
            + Player(name: String, team: Team, inventory: Inventory)
            + addWeapon(weapon: Weapon): boolean
            + removeWeapon(weapon: Weapon): boolean
            + attack(target: Destructible, with: Weapon): void
            + printAvatar(): void
            + printInventory(): void
        }
    }

    interface Destructible {
        + takeDamage(amount: int): void
        + isDestroyed(): boolean
    }

    class Monster implements Destructible {
        - name: String
        - life: int
        - defense: int
        + takeDamage(amount: int): void
        + isDestroyed(): boolean
    }

    class Obstacle implements Destructible {
        - type: String
        - life: int
        + takeDamage(amount: int): void
        + isDestroyed(): boolean
    }







    Player *-- "1" Inventory : owns
    Inventory o--> "0..2" Weapon : contains
    Player --> "1" Team : chosen
    Player ..> WeaponStore : uses
    App ..> Player : uses
    App ..> Team : uses
}
@enduml
