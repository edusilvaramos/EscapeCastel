@startuml
skinparam classAttributeIconSize 0
skinparam classFontStyle bold

package rpgEscapeCastel {

    class App {
        + main(args: String[]): void
    }

    package ascii {
        class PrintAscii {
            - BASE : String
            + printAsciiart(fileName : String) : void
            + loadAsciiart(fileName : String) : String
        }
    }

    package player {

        enum Team {
            CENTAUR
            DEVIL
            DRAGON
            FAIRY
            GHOST
            GRIM_REAPER
            GRYPHON
            MERMAID
            MONSTER
            SKELETON
            UNICORN

            - id : int
            - teamName : String
            - teamPower : int
            - teamLife : int
            - teamMoney : int
            - fileName : String

            + getId() : int
            + getTeamName() : String
            + getTeamPower() : int
            + getTeamLife() : int
            + getTeamMoney() : int
            + setTeamMoney(int) : void
            + getFileName() : String
            + printTeams() : void
            + fromId(int) : Team
            + random() : Team
        }

        class Inventory {
            - capacity : int = 1
            - weapons : List<weapon.Weapon>
            + addWeapon(weapon : weapon.Weapon) : boolean
            + removeWeapon(weapon : weapon.Weapon) : boolean
            + viewWeapons() : List<weapon.Weapon>
            + size() : int
            + isFull() : boolean
            + getCapacity() : int
            + hasWeapon() : boolean
        }

        class Player {
            - name : String
            - team : Team
            + getName() : String
            + setName(String) : void
            + getTeam() : Team
            + getInventory() : Inventory
            + printAvatar() : void
            + printInventory() : void
            + symbolPlace() : String
            + getFileName() : String
        }
    }

    package weapon {

        abstract class Weapon {
            - id : int
            - name : String
            - price : int
            - damage : int
            - fileName : String
            ..operations..
            + getId() : int
            + getName() : String
            + getPrice() : int
            + getDamage() : int
            + getFileName() : String
            + attack(target : gameMap.Destructible) : void
        }

        class Axe extends Weapon
        class Bow extends Weapon
        class Explosive extends Weapon
        class Gun extends Weapon
        class Knife extends Weapon
        class Mace extends Weapon
        class Shield extends Weapon
        class Sword extends Weapon

        class WeaponStore {
            - stockWeapons : List<Weapon>
            + openStock() : void
            + buyWeapon(index : int, buyer : player.Player) : boolean
            + removeWeapon(index : int) : void
            + sellWeapon(index : int) : void
        }


    }

    package gameMap {

        class GameMap {
            - SIZE : int
            - grid : InterfacePlace[][]
            - rnd : Random
            - player : player.Player
            - playerRow : int
            - playerCol : int
            - SC : Scanner
            --
            - fisrtMap(start : InterfacePlace) : void
            - printMap() : void
            + fight(p : player.Player, target : Destructible) : boolean
            + playerMovement() : void
        }

        interface InterfacePlace {
            + getFileName() : String
            + symbolPlace() : String
        }

        interface Destructible {
            + isDestroyed() : boolean
            + getFileName() : String
            + takeDamage(amount : int) : void
            + getLife() : int
            + getPower() : int
        }

        class Monster implements Destructible, InterfacePlace {
            - name : String
            - life : int
            - defense : int
            - fileName : String
            + isDestroyed() : boolean
            + getFileName() : String
            + takeDamage(amount : int) : void
            + fromTeam(team : player.Team) : Monster
            + symbolPlace() : String
            + getLife() : int
            + getPower() : int
        }

        class Obstacle implements Destructible, InterfacePlace {
            - obstacleType : String
            - life : int
            - defense : int
            - fileName : String
            + toString() : String
            + isDestroyed() : boolean
            + getFileName() : String
            + takeDamage(amount : int) : void
            + symbolPlace() : String
            + getLife() : int
            + getPower() : int
        }

        class ExitCastel implements InterfacePlace {
            + getFileName() : String
            + win() : void
            + symbolPlace() : String
            + youDied() : void
            + winFight() : void
            + gameOver() : void
        }


    }

    App ..> ascii.PrintAscii : uses
    player.Player ..> ascii.PrintAscii : uses

    player.Player "1" *-- "1" player.Inventory : owns
    player.Inventory "1" o-- "0..*" weapon.Weapon : weapons
    player.Player --> "1" player.Team : chosen
    player.Player ..> weapon.WeaponStore : uses

    App ..> player.Player : uses
    App ..> player.Team : uses
    Weapon ..> rpgEscapeCastel.ascii.PrintAscii : uses
    Weapon ..> gameMap.Destructible : attack(...)
    WeaponStore o-- "*" Weapon : catalog/factory
    GameMap o-- player.Player : player
    GameMap ..> InterfacePlace : grid cells
    GameMap ..> Destructible : combat
}

@enduml
